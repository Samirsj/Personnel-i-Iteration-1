package testsUnitaires;

import static org.junit.jupiter.api.Assertions.*;

import java.io.File;
import java.time.LocalDate;

import org.junit.jupiter.api.Test;
import personnel.*;

public class TestGestionPersonnel {

    // üî• Supprime la sauvegarde si elle existe (utile pour la s√©rialisation)
    static {
        File fichier = new File("GestionPersonnel.srz");
        if (fichier.exists()) fichier.delete();
    }

    private final GestionPersonnel gestionPersonnel;

    public TestGestionPersonnel() throws ExceptionD, SauvegardeImpossible {
        this.gestionPersonnel = GestionPersonnel.getGestionPersonnel();
    }

    @Test
    void testAddLigue() throws Exception {
        // nom unique pour √©viter conflits en base ou s√©rialisation
        String nomLigue = "Fl√©chettes_" + System.nanoTime();

        Ligue ligue = gestionPersonnel.addLigue(nomLigue);

        assertEquals(nomLigue, ligue.getNom(), "Le nom de la ligue est incorrect.");
        assertTrue(gestionPersonnel.getLigues().contains(ligue), "La ligue n'a pas √©t√© retrouv√©e.");
    }

    @Test
    void testAddEmploye() throws Exception {
        // Cr√©er une ligue temporaire
        Ligue ligue = gestionPersonnel.addLigue("Fl√©chettes_" + System.nanoTime());

        // Ajouter un employ√© avec des dates valides
        Employe employe = ligue.addEmploye("Bouchard", "G√©rard", "g.bouchard@gmail.com", "azerty",
                LocalDate.of(2023, 1, 1), LocalDate.of(2023, 12, 30));

        // V√©rifications
        assertTrue(ligue.getEmployes().contains(employe), "L'employ√© n'est pas dans la ligue.");
        assertEquals("Bouchard", employe.getNom());
        assertEquals("G√©rard", employe.getPrenom());
        assertEquals("g.bouchard@gmail.com", employe.getMail());
        assertTrue(employe.checkPassword("azerty"), "Le mot de passe est incorrect.");
    }
}
